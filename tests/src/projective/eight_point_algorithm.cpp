/* eight_point_algorithm.cpp
 *
 * Author: Fabian Meyer
 * Created On: 26 Sep 2019
 */

#include "assert/eigen_require.h"
#include <cve/projective/eight_point_algorithm.h>

using namespace cve;

typedef double Scalar;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, 3, 3> Matrix3;

TEST_CASE("eight_point_algorithm")
{
    const Scalar eps = 1e-3;
    EightPointAlgorithm<Scalar> algorithm;

    Matrix pointsA(2, 11);
    pointsA <<
        63.43921044061905, 435.72956489670617, 317.7411318242701, 173.12604613032883, 122.32352404284693, 498.63262103377616, 380.84160911108586, 235.03913293409497, 183.58843498593697, 111.79005415568118, 440.00887945970663,
        405.57679766845445, 424.20940447867986, 393.93767327832836, 329.6705367196501, 239.49645820189613, 246.72000146662035, 218.48890929985095, 159.28494789041306, 74.10334829270418, 23.257341560463768, 48.06368484279363;
    Matrix pointsB(2, 11);
    pointsB <<
        137.22826265754128, 468.0969116124544, 355.52539639340546, 228.6674247723076, 186.77027044489435, 533.0144174415416, 416.26598017327336, 283.3415369449946, 239.10030401088463, 177.97676540879692, 474.41788883915154,
        394.36338179898917, 426.8910599406407, 391.34697706149575, 326.46538419427435, 243.14467479496832, 246.64625376414494, 219.391277252366, 165.41328309895414, 87.444925082216, 44.72169880469761, 45.59782436338222;

    Matrix3 F = algorithm(pointsA, pointsB);

    Matrix3 FExp;
    FExp <<
        -0.370899, -0.80532, 310.764,
        -0.404086, -0.69118, 320.653,
        -0.00114046, -0.0029382, 1;

    REQUIRE_MATRIX_APPROX(FExp, F, eps);
}
